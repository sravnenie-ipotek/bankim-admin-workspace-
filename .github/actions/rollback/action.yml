name: Rollback Deployment
description: Rollback to previous version on failure

inputs:
  server:
    description: 'Server hostname or IP'
    required: true
  username:
    description: 'SSH username'
    required: true
  password:
    description: 'SSH password'
    required: true

runs:
  using: composite
  steps:
    - name: Execute rollback
      shell: bash
      run: |
        sshpass -f <(echo "${{ inputs.password }}") ssh -o StrictHostKeyChecking=no \
          ${{ inputs.username }}@${{ inputs.server }} << 'EOF'
        set -e
        
        # Colors
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        RED='\033[0;31m'
        NC='\033[0m'
        
        echo -e "${RED}üö® DEPLOYMENT FAILED - INITIATING ROLLBACK${NC}"
        
        log() {
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a /var/log/bankim-deploy.log
        }
        
        print_status() {
          echo -e "${YELLOW}üîÑ $1${NC}"
        }
        
        print_success() {
          echo -e "${GREEN}‚úÖ $1${NC}"
        }
        
        log "üö® ROLLBACK: Deployment failed, initiating rollback procedure"
        
        # Stop current services
        print_status "Stopping failed deployment..."
        pm2 stop all || true
        
        # Find latest backup
        LATEST_BACKUP=$(ls -t /var/backups/bankim/pre-deploy-*.tar.gz 2>/dev/null | head -1)
        
        if [ -z "$LATEST_BACKUP" ]; then
          echo -e "${RED}‚ùå No backup found for rollback!${NC}"
          log "‚ùå CRITICAL: No backup found for rollback"
          exit 1
        fi
        
        print_status "Rolling back to: $(basename $LATEST_BACKUP)"
        log "üîÑ Rolling back to: $(basename $LATEST_BACKUP)"
        
        # Backup current failed state
        print_status "Backing up failed deployment for analysis..."
        tar -czf "/var/backups/bankim/failed-deploy-$(date +%Y%m%d-%H%M%S).tar.gz" \
          -C /var/www/bankim . \
          --exclude=node_modules \
          --exclude=.git 2>/dev/null || true
        
        # Restore from backup
        print_status "Restoring from backup..."
        cd /var/www/bankim
        rm -rf ./* 2>/dev/null || true
        tar -xzf "$LATEST_BACKUP" --overwrite
        
        # Reinstall dependencies for restored version
        print_status "Reinstalling dependencies..."
        if [ -d "packages/server" ]; then
          cd packages/server && npm install --production --silent
        fi
        if [ -d "packages/client" ]; then
          cd packages/client && npm install --production --silent
        fi
        if [ -d "packages/shared" ]; then
          cd packages/shared && npm install --production --silent
        fi
        
        # Restart services with restored configuration
        print_status "Restarting services..."
        cd /var/www/bankim
        pm2 start ecosystem.config.js || pm2 restart all
        sleep 10
        
        # Health check after rollback
        print_status "Verifying rollback health..."
        API_PORT=$(grep -o 'PORT.*[0-9]\+' ecosystem.config.js | grep -o '[0-9]\+' | head -1)
        API_PORT=${API_PORT:-8003}
        
        if curl -f http://localhost:$API_PORT/api/health > /dev/null 2>&1; then
          print_success "‚úÖ Rollback successful - API is healthy"
          log "‚úÖ Rollback completed successfully - services restored"
        else
          echo -e "${RED}‚ùå Rollback verification failed${NC}"
          log "‚ùå CRITICAL: Rollback verification failed - manual intervention required"
          pm2 logs --lines 50
          exit 1
        fi
        
        echo -e "${GREEN}üéâ Rollback completed successfully${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  Please investigate deployment failure in logs${NC}"
        
        EOF