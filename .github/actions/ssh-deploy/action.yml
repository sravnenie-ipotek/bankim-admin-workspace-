name: SSH Deploy
description: Deploy to server via SSH with multi-repo coordination

inputs:
  server:
    description: 'Server hostname or IP'
    required: true
  username:
    description: 'SSH username'
    required: true
  password:
    description: 'SSH password'
    required: true
  environment:
    description: 'Environment (test/production)'
    required: true
  client-artifact:
    description: 'Client build artifact path'
    required: true
  server-artifact:
    description: 'Server build artifact path'
    required: true
  shared-artifact:
    description: 'Shared build artifact path'
    required: true
  script:
    description: 'Additional script to run'
    required: false

runs:
  using: composite
  steps:
    - name: Setup SSH
      shell: bash
      run: |
        mkdir -p ~/.ssh
        echo "${{ inputs.password }}" > ~/.ssh/password
        chmod 600 ~/.ssh/password
        
    - name: Create deployment directory
      shell: bash
      run: |
        sshpass -f ~/.ssh/password ssh -o StrictHostKeyChecking=no \
          ${{ inputs.username }}@${{ inputs.server }} \
          "mkdir -p /tmp/bankim-deploy-$(date +%s)"
        
    - name: Upload artifacts
      shell: bash
      run: |
        DEPLOY_DIR="/tmp/bankim-deploy-$(date +%s)"
        
        # Upload all artifacts
        sshpass -f ~/.ssh/password scp -o StrictHostKeyChecking=no \
          ${{ inputs.client-artifact }} \
          ${{ inputs.server-artifact }} \
          ${{ inputs.shared-artifact }} \
          ${{ inputs.username }}@${{ inputs.server }}:$DEPLOY_DIR/
        
    - name: Execute deployment
      shell: bash
      run: |
        DEPLOY_DIR="/tmp/bankim-deploy-$(date +%s)"
        
        sshpass -f ~/.ssh/password ssh -o StrictHostKeyChecking=no \
          ${{ inputs.username }}@${{ inputs.server }} << 'EOF'
        set -e
        
        # Colors for output
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        RED='\033[0;31m'
        NC='\033[0m'
        
        log() {
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a /var/log/bankim-deploy.log
        }
        
        print_status() {
          echo -e "${YELLOW}🔄 $1${NC}"
        }
        
        print_success() {
          echo -e "${GREEN}✅ $1${NC}"
        }
        
        print_error() {
          echo -e "${RED}❌ $1${NC}"
        }
        
        log "🚀 Starting BankIM deployment to ${{ inputs.environment }}"
        
        # Set environment-specific variables
        if [ "${{ inputs.environment }}" = "production" ]; then
          BASE_PATH="/var/www/bankim"
          API_PORT="8003"
          CLIENT_PORT="8004"
        else
          BASE_PATH="/var/www/bankim"
          API_PORT="8003" 
          CLIENT_PORT="8004"
        fi
        
        # Create backup
        print_status "Creating backup..."
        mkdir -p /var/backups/bankim
        if [ -d "$BASE_PATH" ]; then
          tar -czf "/var/backups/bankim/backup-$(date +%Y%m%d-%H%M%S).tar.gz" \
            -C "$BASE_PATH" . \
            --exclude=node_modules \
            --exclude=.git \
            --exclude="*.log" 2>/dev/null || true
        fi
        print_success "Backup created"
        
        # Stop services
        print_status "Stopping services..."
        pm2 stop bankim-api bankim-client 2>/dev/null || true
        
        # Deploy server
        print_status "Deploying server..."
        mkdir -p "$BASE_PATH/packages/server"
        cd "$BASE_PATH/packages/server"
        tar -xzf "$DEPLOY_DIR/server-*.tar.gz" --overwrite
        npm install --production --silent
        print_success "Server deployed"
        
        # Deploy client  
        print_status "Deploying client..."
        mkdir -p "$BASE_PATH/packages/client"
        cd "$BASE_PATH/packages/client"
        tar -xzf "$DEPLOY_DIR/client-*.tar.gz" --overwrite
        npm install --production --silent
        npm run build
        print_success "Client deployed"
        
        # Deploy shared
        print_status "Deploying shared..."
        mkdir -p "$BASE_PATH/packages/shared"
        cd "$BASE_PATH/packages/shared"
        tar -xzf "$DEPLOY_DIR/shared-*.tar.gz" --overwrite
        npm install --production --silent
        npm run build
        print_success "Shared deployed"
        
        # Update PM2 ecosystem
        print_status "Updating PM2 configuration..."
        cd "$BASE_PATH"
        cat > ecosystem.config.js << 'EOFPM2'
module.exports = {
  apps: [
    {
      name: 'bankim-api',
      cwd: '/var/www/bankim/packages/server',
      script: 'server.js',
      env: {
        NODE_ENV: '${{ inputs.environment }}',
        PORT: process.env.PORT || '$API_PORT'
      },
      instances: 1,
      autorestart: true,
      watch: false,
      max_memory_restart: '1G',
      log_file: '/var/log/pm2/bankim-api.log',
      error_file: '/var/log/pm2/bankim-api-error.log',
      out_file: '/var/log/pm2/bankim-api-out.log'
    },
    {
      name: 'bankim-client',
      cwd: '/var/www/bankim/packages/client',
      script: 'npx',
      args: 'serve dist -p $CLIENT_PORT -s',
      env: {
        NODE_ENV: '${{ inputs.environment }}'
      },
      instances: 1,
      autorestart: true,
      watch: false,
      max_memory_restart: '512M',
      log_file: '/var/log/pm2/bankim-client.log',
      error_file: '/var/log/pm2/bankim-client-error.log',
      out_file: '/var/log/pm2/bankim-client-out.log'
    }
  ]
}
EOFPM2
        
        # Start services
        print_status "Starting services..."
        pm2 start ecosystem.config.js
        pm2 save
        print_success "Services started"
        
        # Health check
        print_status "Running health checks..."
        sleep 10
        
        # Check API
        if curl -f http://localhost:$API_PORT/api/health > /dev/null 2>&1; then
          print_success "API health check passed"
        else
          print_error "API health check failed"
          pm2 logs bankim-api --lines 20
          exit 1
        fi
        
        # Check Client
        if curl -f http://localhost:$CLIENT_PORT > /dev/null 2>&1; then
          print_success "Client health check passed"
        else
          print_error "Client health check failed" 
          pm2 logs bankim-client --lines 20
          exit 1
        fi
        
        # Cleanup deployment artifacts
        rm -rf "$DEPLOY_DIR"
        
        log "✅ Deployment to ${{ inputs.environment }} completed successfully"
        print_success "🎉 Deployment completed successfully!"
        EOF
        
    - name: Run additional script
      if: inputs.script != ''
      shell: bash
      run: |
        sshpass -f ~/.ssh/password ssh -o StrictHostKeyChecking=no \
          ${{ inputs.username }}@${{ inputs.server }} \
          "${{ inputs.script }}"
        
    - name: Cleanup
      shell: bash
      if: always()
      run: |
        rm -f ~/.ssh/password