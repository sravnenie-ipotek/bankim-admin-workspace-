name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint
        run: npm run lint
        
      - name: Type check
        run: npm run type-check
        
      - name: Build all packages
        run: npm run build
        
      - name: Unit tests
        run: npm run test
        
      - name: E2E tests
        run: |
          npm run test:all --workspace=@bankim/client
        env:
          NODE_ENV: test
          
      - name: Security audit
        run: npm audit --audit-level high
        
      - name: Check for changes
        id: changes
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  multi-repo-build:
    name: Multi-Repository Build
    runs-on: ubuntu-latest
    needs: quality-gates
    if: needs.quality-gates.outputs.should-deploy == 'true'
    
    strategy:
      matrix:
        package: [client, server, shared]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
        
      - name: Build ${{ matrix.package }}
        run: npm run build --workspace=@bankim/${{ matrix.package }}
        
      - name: Package ${{ matrix.package }} artifacts
        run: |
          cd packages/${{ matrix.package }}
          tar -czf ../../${{ matrix.package }}-${{ github.sha }}.tar.gz \
            --exclude=node_modules \
            --exclude=.git \
            --exclude='*.log' \
            .
        
      - name: Upload ${{ matrix.package }} artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.package }}-build
          path: ${{ matrix.package }}-${{ github.sha }}.tar.gz
          retention-days: 30

  database-validation:
    name: Database Validation
    runs-on: ubuntu-latest
    needs: quality-gates
    if: needs.quality-gates.outputs.should-deploy == 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: bankim_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
        
      - name: Test database migrations
        run: |
          cd packages/server
          npm run db:migrate
        env:
          CONTENT_DATABASE_URL: postgresql://test_user:test_password@localhost:5432/bankim_test
          CORE_DATABASE_URL: postgresql://test_user:test_password@localhost:5432/bankim_test
          MANAGEMENT_DATABASE_URL: postgresql://test_user:test_password@localhost:5432/bankim_test
          
      - name: Test database connection
        run: npm run test:db --workspace=@bankim/server
        env:
          CONTENT_DATABASE_URL: postgresql://test_user:test_password@localhost:5432/bankim_test

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality-gates
    if: needs.quality-gates.outputs.should-deploy == 'true'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          
      - name: CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript

  deploy-test:
    name: Deploy to Test Environment
    runs-on: ubuntu-latest
    needs: [quality-gates, multi-repo-build, database-validation]
    if: github.ref == 'refs/heads/develop' && needs.quality-gates.outputs.should-deploy == 'true'
    environment: 
      name: test
      url: http://91.202.169.54:8003
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Deploy to Test Server
        uses: ./.github/actions/ssh-deploy
        with:
          server: ${{ secrets.TEST_SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.TEST_SERVER_PASSWORD }}
          environment: test
          client-artifact: client-build/client-${{ github.sha }}.tar.gz
          server-artifact: server-build/server-${{ github.sha }}.tar.gz
          shared-artifact: shared-build/shared-${{ github.sha }}.tar.gz
          
      - name: Post-deployment health check
        run: |
          sleep 30
          curl -f http://${{ secrets.TEST_SERVER_HOST }}:8003/api/health
          
      - name: Run smoke tests
        run: |
          npm run test:smoke --workspace=@bankim/client
        env:
          BASE_URL: http://${{ secrets.TEST_SERVER_HOST }}:8003

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-gates, multi-repo-build, database-validation, security-scan]
    if: github.ref == 'refs/heads/main' && needs.quality-gates.outputs.should-deploy == 'true'
    environment: 
      name: production
      url: http://185.220.207.52:8003
    
    steps:
      - name: Production deployment approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: ${{ secrets.PROD_APPROVERS }}
          minimum-approvals: 1
          issue-title: "ðŸš€ Production Deployment: ${{ github.sha }}"
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Create production backup
        uses: ./.github/actions/ssh-backup
        with:
          server: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          
      - name: Deploy to Production Server
        uses: ./.github/actions/ssh-deploy
        with:
          server: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          environment: production
          client-artifact: client-build/client-${{ github.sha }}.tar.gz
          server-artifact: server-build/server-${{ github.sha }}.tar.gz
          shared-artifact: shared-build/shared-${{ github.sha }}.tar.gz
          
      - name: Database migrations
        uses: ./.github/actions/ssh-deploy
        with:
          server: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          script: |
            cd /var/www/bankim/api/mainapp
            npm run db:migrate
            
      - name: Production health check
        run: |
          sleep 60
          curl -f http://${{ secrets.PROD_SERVER_HOST }}:8003/api/health
          
      - name: Production smoke tests
        run: |
          npm run test:smoke --workspace=@bankim/client
        env:
          BASE_URL: http://${{ secrets.PROD_SERVER_HOST }}:8003
          
      - name: Notify deployment success
        if: success()
        uses: ./.github/actions/notify
        with:
          message: "âœ… Production deployment successful: ${{ github.sha }}"
          
      - name: Rollback on failure
        if: failure()
        uses: ./.github/actions/rollback
        with:
          server: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}