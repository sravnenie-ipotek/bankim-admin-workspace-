import React, { useState } from 'react';
import { useAuth, UserRole } from '../../contexts/AuthContext';
import './AdminLogin.css';

const AdminLogin: React.FC = () => {
  const { login, loading } = useAuth();
  const [email, setEmail] = useState('admin@bankim.com');
  const [password, setPassword] = useState('admin123');
  const [selectedRole, setSelectedRole] = useState<UserRole>('director');
  const [error, setError] = useState('');
  const [showPassword, setShowPassword] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    if (!email || !password) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    const success = await login(email, password, selectedRole);
    if (!success) {
      setError('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É');
    }
  };

  const roles: { value: UserRole; label: string }[] = [
    { value: 'director', label: '–î–∏—Ä–µ–∫—Ç–æ—Ä' },
    { value: 'administration', label: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' },
    { value: 'sales-manager', label: '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º' },
    { value: 'content-manager', label: '–ö–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä' },
    { value: 'brokers', label: '–ë—Ä–æ–∫–µ—Ä' },
    { value: 'bank-employee', label: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –±–∞–Ω–∫–∞' }
  ];

  return (
    <div className="admin-login">
      {/* Header with logo and language */}
      <div className="login-header">
        <div className="logo-container">
          <div className="logo">üè¶</div>
        </div>
        <div className="language-selector">
          <span className="language-text">–†—É—Å—Å–∫–∏–π</span>
          <span className="language-icon">üåê</span>
        </div>
      </div>

      {/* Main login form container */}
      <div className="login-container">
        <div className="form-header">
          <h1 className="form-title">–í—Ö–æ–¥</h1>
          <p className="form-subtitle">–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç</p>
        </div>

        <form onSubmit={handleSubmit} className="login-form">
          {/* Email field */}
          <div className="form-group">
            <label htmlFor="email" className="form-label">Email</label>
            <div className="input-container">
              <span className="input-icon email-icon">üìß</span>
              <input
                type="email"
                id="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ email"
                className="form-input"
                required
              />
            </div>
          </div>

          {/* Position/Role field */}
          <div className="form-group">
            <label htmlFor="role" className="form-label">–î–æ–ª–∂–Ω–æ—Å—Ç—å</label>
            <div className="select-container">
              <select
                id="role"
                value={selectedRole}
                onChange={(e) => setSelectedRole(e.target.value as UserRole)}
                className="form-select"
              >
                <option value="" disabled hidden>–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å</option>
                {roles.map((role) => (
                  <option key={role.value} value={role.value}>
                    {role.label}
                  </option>
                ))}
              </select>
              <span className="select-arrow">‚åÑ</span>
            </div>
          </div>

          {/* Password field */}
          <div className="form-group">
            <label htmlFor="password" className="form-label">–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</label>
            <div className="input-container">
              <span className="input-icon password-icon">üîí</span>
              <input
                type={showPassword ? 'text' : 'password'}
                id="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                className="form-input"
                required
              />
              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                className="password-toggle"
              >
                {showPassword ? 'üôà' : 'üëÅÔ∏è'}
              </button>
            </div>
          </div>

          {error && (
            <div className="error-message">
              ‚ùå {error}
            </div>
          )}

          <button type="submit" disabled={loading} className="login-btn">
            {loading ? '–í—Ö–æ–¥...' : '–í–æ–π—Ç–∏'}
          </button>
        </form>
      </div>

      {/* Footer logo */}
      <div className="footer-logo">
        <div className="footer-brand">üè¶ BankIM</div>
      </div>
    </div>
  );
};

export default AdminLogin; 