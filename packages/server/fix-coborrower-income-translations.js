const { Client } = require('pg');
require('dotenv').config();

const connectionString = process.env.CONTENT_DATABASE_URL;

// Meaningful business translations for co-borrower income fields
const COBORROWER_INCOME_TRANSLATIONS = {
  'credit_refi_coborrower_income.item_1': {
    en: 'Co-borrower Employment Status',
    he: '◊°◊ò◊ò◊ï◊° ◊™◊¢◊°◊ï◊ß◊î ◊©◊ú ◊ú◊ï◊ï◊î ◊û◊©◊ï◊™◊£',
    ru: '–°—Ç–∞—Ç—É—Å –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —Å–æ–∑–∞–µ–º—â–∏–∫–∞'
  },
  'credit_refi_coborrower_income.item_2': {
    en: 'Co-borrower Employer Name',
    he: '◊©◊ù ◊î◊û◊¢◊°◊ô◊ß ◊©◊ú ◊ú◊ï◊ï◊î ◊û◊©◊ï◊™◊£',
    ru: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è —Å–æ–∑–∞–µ–º—â–∏–∫–∞'
  },
  'credit_refi_coborrower_income.item_3': {
    en: 'Co-borrower Position/Title',
    he: '◊™◊§◊ß◊ô◊ì ◊©◊ú ◊ú◊ï◊ï◊î ◊û◊©◊ï◊™◊£',
    ru: '–î–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ–∑–∞–µ–º—â–∏–∫–∞'
  },
  'credit_refi_coborrower_income.item_4': {
    en: 'Co-borrower Monthly Salary',
    he: '◊û◊©◊õ◊ï◊®◊™ ◊ó◊ï◊ì◊©◊ô◊™ ◊©◊ú ◊ú◊ï◊ï◊î ◊û◊©◊ï◊™◊£',
    ru: '–ú–µ—Å—è—á–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ —Å–æ–∑–∞–µ–º—â–∏–∫–∞'
  },
  'credit_refi_coborrower_income.item_5': {
    en: 'Co-borrower Years of Employment',
    he: '◊©◊†◊ï◊™ ◊ï◊™◊ß ◊©◊ú ◊ú◊ï◊ï◊î ◊û◊©◊ï◊™◊£',
    ru: '–°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã —Å–æ–∑–∞–µ–º—â–∏–∫–∞'
  },
  'credit_refi_coborrower_income.item_6': {
    en: 'Co-borrower Additional Income',
    he: '◊î◊õ◊†◊°◊î ◊†◊ï◊°◊§◊™ ◊©◊ú ◊ú◊ï◊ï◊î ◊û◊©◊ï◊™◊£',
    ru: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ —Å–æ–∑–∞–µ–º—â–∏–∫–∞'
  },
  'credit_refi_coborrower_income.item_7': {
    en: 'Co-borrower Income Type',
    he: '◊°◊ï◊í ◊î◊õ◊†◊°◊î ◊©◊ú ◊ú◊ï◊ï◊î ◊û◊©◊ï◊™◊£',
    ru: '–¢–∏–ø –¥–æ—Ö–æ–¥–∞ —Å–æ–∑–∞–µ–º—â–∏–∫–∞'
  },
  'credit_refi_coborrower_income.item_8': {
    en: 'Co-borrower Tax Deductions',
    he: '◊†◊ô◊õ◊ï◊ô◊ô ◊û◊° ◊©◊ú ◊ú◊ï◊ï◊î ◊û◊©◊ï◊™◊£',
    ru: '–ù–∞–ª–æ–≥–æ–≤—ã–µ –≤—ã—á–µ—Ç—ã —Å–æ–∑–∞–µ–º—â–∏–∫–∞'
  },
  'credit_refi_coborrower_income.item_9': {
    en: 'Co-borrower Net Income',
    he: '◊î◊õ◊†◊°◊î ◊†◊ò◊ï ◊©◊ú ◊ú◊ï◊ï◊î ◊û◊©◊ï◊™◊£',
    ru: '–ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥ —Å–æ–∑–∞–µ–º—â–∏–∫–∞'
  },
  'credit_refi_coborrower_income.item_10': {
    en: 'Co-borrower Bonus Income',
    he: '◊ë◊ï◊†◊ï◊°◊ô◊ù ◊©◊ú ◊ú◊ï◊ï◊î ◊û◊©◊ï◊™◊£',
    ru: '–ë–æ–Ω—É—Å–Ω—ã–π –¥–æ—Ö–æ–¥ —Å–æ–∑–∞–µ–º—â–∏–∫–∞'
  },
  'credit_refi_coborrower_income.item_11': {
    en: 'Co-borrower Commission Income',
    he: '◊¢◊û◊ú◊ï◊™ ◊©◊ú ◊ú◊ï◊ï◊î ◊û◊©◊ï◊™◊£',
    ru: '–ö–æ–º–∏—Å—Å–∏–æ–Ω–Ω—ã–π –¥–æ—Ö–æ–¥ —Å–æ–∑–∞–µ–º—â–∏–∫–∞'
  },
  'credit_refi_coborrower_income.item_12': {
    en: 'Co-borrower Self-Employment Income',
    he: '◊î◊õ◊†◊°◊î ◊û◊¢◊°◊ß ◊¢◊¶◊û◊ê◊ô ◊©◊ú ◊ú◊ï◊ï◊î ◊û◊©◊ï◊™◊£',
    ru: '–î–æ—Ö–æ–¥ –æ—Ç —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —Å–æ–∑–∞–µ–º—â–∏–∫–∞'
  },
  'credit_refi_coborrower_income.item_13': {
    en: 'Co-borrower Pension Income',
    he: '◊§◊†◊°◊ô◊î ◊©◊ú ◊ú◊ï◊ï◊î ◊û◊©◊ï◊™◊£',
    ru: '–ü–µ–Ω—Å–∏–æ–Ω–Ω—ã–π –¥–æ—Ö–æ–¥ —Å–æ–∑–∞–µ–º—â–∏–∫–∞'
  },
  'credit_refi_coborrower_income.item_14': {
    en: 'Co-borrower Investment Income',
    he: '◊î◊õ◊†◊°◊î ◊û◊î◊©◊ß◊¢◊ï◊™ ◊©◊ú ◊ú◊ï◊ï◊î ◊û◊©◊ï◊™◊£',
    ru: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –¥–æ—Ö–æ–¥ —Å–æ–∑–∞–µ–º—â–∏–∫–∞'
  },
  'credit_refi_coborrower_income.item_15': {
    en: 'Co-borrower Rental Income',
    he: '◊î◊õ◊†◊°◊î ◊û◊©◊õ◊ô◊®◊ï◊™ ◊©◊ú ◊ú◊ï◊ï◊î ◊û◊©◊ï◊™◊£',
    ru: '–î–æ—Ö–æ–¥ –æ—Ç –∞—Ä–µ–Ω–¥—ã —Å–æ–∑–∞–µ–º—â–∏–∫–∞'
  },
  'credit_refi_coborrower_income.item_16': {
    en: 'Co-borrower Government Benefits',
    he: '◊ß◊¶◊ë◊ê◊ï◊™ ◊û◊û◊©◊ú◊™◊ô◊ï◊™ ◊©◊ú ◊ú◊ï◊ï◊î ◊û◊©◊ï◊™◊£',
    ru: '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ—Å–æ–±–∏—è —Å–æ–∑–∞–µ–º—â–∏–∫–∞'
  },
  'credit_refi_coborrower_income.item_17': {
    en: 'Co-borrower Alimony Income',
    he: '◊ì◊û◊ô ◊û◊ñ◊ï◊†◊ï◊™ ◊©◊ú ◊ú◊ï◊ï◊î ◊û◊©◊ï◊™◊£',
    ru: '–ê–ª–∏–º–µ–Ω—Ç—ã —Å–æ–∑–∞–µ–º—â–∏–∫–∞'
  },
  'credit_refi_coborrower_income.item_18': {
    en: 'Co-borrower Freelance Income',
    he: '◊î◊õ◊†◊°◊î ◊û◊§◊®◊ô◊ú◊†◊° ◊©◊ú ◊ú◊ï◊ï◊î ◊û◊©◊ï◊™◊£',
    ru: '–î–æ—Ö–æ–¥ –æ—Ç —Ñ—Ä–∏–ª–∞–Ω—Å–∞ —Å–æ–∑–∞–µ–º—â–∏–∫–∞'
  },
  'credit_refi_coborrower_income.item_19': {
    en: 'Co-borrower Part-Time Income',
    he: '◊î◊õ◊†◊°◊î ◊û◊¢◊ë◊ï◊ì◊î ◊ó◊ú◊ß◊ô◊™ ◊©◊ú ◊ú◊ï◊ï◊î ◊û◊©◊ï◊™◊£',
    ru: '–î–æ—Ö–æ–¥ –æ—Ç —á–∞—Å—Ç–∏—á–Ω–æ–π –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —Å–æ–∑–∞–µ–º—â–∏–∫–∞'
  },
  'credit_refi_coborrower_income.item_20': {
    en: 'Co-borrower Seasonal Income',
    he: '◊î◊õ◊†◊°◊î ◊¢◊ï◊†◊™◊ô◊™ ◊©◊ú ◊ú◊ï◊ï◊î ◊û◊©◊ï◊™◊£',
    ru: '–°–µ–∑–æ–Ω–Ω—ã–π –¥–æ—Ö–æ–¥ —Å–æ–∑–∞–µ–º—â–∏–∫–∞'
  },
  'credit_refi_coborrower_income.item_21': {
    en: 'Co-borrower Income Verification',
    he: '◊ê◊ô◊û◊ï◊™ ◊î◊õ◊†◊°◊î ◊©◊ú ◊ú◊ï◊ï◊î ◊û◊©◊ï◊™◊£',
    ru: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ —Å–æ–∑–∞–µ–º—â–∏–∫–∞'
  },
  'credit_refi_coborrower_income.item_22': {
    en: 'Co-borrower Income Documents',
    he: '◊û◊°◊û◊õ◊ô ◊î◊õ◊†◊°◊î ◊©◊ú ◊ú◊ï◊ï◊î ◊û◊©◊ï◊™◊£',
    ru: '–î–æ–∫—É–º–µ–Ω—Ç—ã –æ –¥–æ—Ö–æ–¥–∞—Ö —Å–æ–∑–∞–µ–º—â–∏–∫–∞'
  },
  'credit_refi_coborrower_income.item_23': {
    en: 'Co-borrower Income History',
    he: '◊î◊ô◊°◊ò◊ï◊®◊ô◊ô◊™ ◊î◊õ◊†◊°◊î ◊©◊ú ◊ú◊ï◊ï◊î ◊û◊©◊ï◊™◊£',
    ru: '–ò—Å—Ç–æ—Ä–∏—è –¥–æ—Ö–æ–¥–æ–≤ —Å–æ–∑–∞–µ–º—â–∏–∫–∞'
  },
  'credit_refi_coborrower_income.item_24': {
    en: 'Co-borrower Total Monthly Income',
    he: '◊°◊ö ◊î◊õ◊†◊°◊î ◊ó◊ï◊ì◊©◊ô◊™ ◊©◊ú ◊ú◊ï◊ï◊î ◊û◊©◊ï◊™◊£',
    ru: '–û–±—â–∏–π –º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ —Å–æ–∑–∞–µ–º—â–∏–∫–∞'
  }
};

async function fixCoborrowerIncomeTranslations() {
  const client = new Client({
    connectionString,
    ssl: { rejectUnauthorized: false }
  });

  try {
    await client.connect();
    console.log('üìä Fixing placeholder translations for credit_refi_coborrower_income\n');

    // Begin transaction
    await client.query('BEGIN');

    let updatedCount = 0;
    let errors = [];

    for (const [contentKey, translations] of Object.entries(COBORROWER_INCOME_TRANSLATIONS)) {
      // Get the content_item_id for this content_key
      const itemResult = await client.query(
        'SELECT id FROM content_items WHERE content_key = $1',
        [contentKey]
      );

      if (itemResult.rows.length === 0) {
        console.log(`‚ö†Ô∏è  Content key not found: ${contentKey}`);
        continue;
      }

      const contentItemId = itemResult.rows[0].id;

      // Update translations for each language
      for (const [lang, translation] of Object.entries(translations)) {
        try {
          const result = await client.query(`
            UPDATE content_translations
            SET content_value = $1,
                updated_at = CURRENT_TIMESTAMP
            WHERE content_item_id = $2 
              AND language_code = $3
              AND status = 'approved'
          `, [translation, contentItemId, lang]);

          if (result.rowCount > 0) {
            updatedCount++;
            console.log(`‚úÖ Updated ${lang} for ${contentKey}`);
          } else {
            // Try to insert if update didn't find the row
            const insertResult = await client.query(`
              INSERT INTO content_translations (content_item_id, language_code, content_value, status)
              VALUES ($1, $2, $3, 'approved')
              ON CONFLICT (content_item_id, language_code) 
              DO UPDATE SET content_value = $3, updated_at = CURRENT_TIMESTAMP
            `, [contentItemId, lang, translation]);
            
            if (insertResult.rowCount > 0) {
              updatedCount++;
              console.log(`‚úÖ Inserted ${lang} for ${contentKey}`);
            }
          }
        } catch (err) {
          errors.push(`Error updating ${contentKey} (${lang}): ${err.message}`);
        }
      }
    }

    // Commit transaction
    await client.query('COMMIT');

    console.log('\nüìä Summary:');
    console.log(`‚úÖ Successfully updated ${updatedCount} translations`);
    
    if (errors.length > 0) {
      console.log('\n‚ö†Ô∏è  Errors encountered:');
      errors.forEach(err => console.log(`   - ${err}`));
    }

    // Verify the fix
    const verifyResult = await client.query(`
      SELECT 
        COUNT(*) as total,
        COUNT(CASE WHEN content_value LIKE '%Field %' THEN 1 END) as placeholders
      FROM content_translations ct
      JOIN content_items ci ON ci.id = ct.content_item_id
      WHERE ci.screen_location = 'credit_refi_coborrower_income'
    `);

    const stats = verifyResult.rows[0];
    console.log('\nüìã Verification:');
    console.log(`   Total translations: ${stats.total}`);
    console.log(`   Remaining placeholders: ${stats.placeholders}`);
    
    if (stats.placeholders === '0') {
      console.log('\n‚úÖ SUCCESS: All placeholder translations have been replaced with meaningful content!');
    } else {
      console.log('\n‚ö†Ô∏è  Some placeholders may still remain');
    }

  } catch (error) {
    await client.query('ROLLBACK');
    console.error('‚ùå Error:', error.message);
  } finally {
    await client.end();
  }
}

fixCoborrowerIncomeTranslations();