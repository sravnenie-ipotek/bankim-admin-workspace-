#!/usr/bin/env node

const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  connectionString: process.env.CONTENT_DATABASE_URL || process.env.DATABASE_URL || 'postgresql://postgres:SuFkUevgonaZFXJiJeczFiXYTlICHVJL@shortline.proxy.rlwy.net:33452/railway',
  ssl: { rejectUnauthorized: false }
});

const LANGUAGES = ['ru', 'he', 'en'];

// Common translation patterns for different types of content
const TRANSLATION_PATTERNS = {
  // Form elements
  'name': { ru: '–ò–º—è', he: '◊©◊ù', en: 'Name' },
  'email': { ru: 'Email', he: '◊ì◊ï◊ê"◊ú', en: 'Email' },
  'phone': { ru: '–¢–µ–ª–µ—Ñ–æ–Ω', he: '◊ò◊ú◊§◊ï◊ü', en: 'Phone' },
  'password': { ru: '–ü–∞—Ä–æ–ª—å', he: '◊°◊ô◊°◊û◊î', en: 'Password' },
  'submit': { ru: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å', he: '◊©◊ú◊ó', en: 'Submit' },
  'continue': { ru: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', he: '◊î◊û◊©◊ö', en: 'Continue' },
  'back': { ru: '–ù–∞–∑–∞–¥', he: '◊ó◊ñ◊ï◊®', en: 'Back' },
  'next': { ru: '–î–∞–ª–µ–µ', he: '◊î◊ë◊ê', en: 'Next' },
  'cancel': { ru: '–û—Ç–º–µ–Ω–∞', he: '◊ë◊ô◊ò◊ï◊ú', en: 'Cancel' },
  'save': { ru: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', he: '◊©◊û◊ï◊®', en: 'Save' },
  'close': { ru: '–ó–∞–∫—Ä—ã—Ç—å', he: '◊°◊í◊ï◊®', en: 'Close' },
  'yes': { ru: '–î–∞', he: '◊õ◊ü', en: 'Yes' },
  'no': { ru: '–ù–µ—Ç', he: '◊ú◊ê', en: 'No' },
  
  // Credit/Finance terms
  'credit': { ru: '–ö—Ä–µ–¥–∏—Ç', he: '◊ê◊©◊®◊ê◊ô', en: 'Credit' },
  'mortgage': { ru: '–ò–ø–æ—Ç–µ–∫–∞', he: '◊û◊©◊õ◊†◊™◊ê', en: 'Mortgage' },
  'refinance': { ru: '–†–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ', he: '◊û◊ó◊ñ◊ï◊®', en: 'Refinance' },
  'loan': { ru: '–ó–∞–π–º', he: '◊î◊ú◊ï◊ï◊ê◊î', en: 'Loan' },
  'rate': { ru: '–°—Ç–∞–≤–∫–∞', he: '◊®◊ô◊ë◊ô◊™', en: 'Rate' },
  'amount': { ru: '–°—É–º–º–∞', he: '◊°◊õ◊ï◊ù', en: 'Amount' },
  'payment': { ru: '–ü–ª–∞—Ç–µ–∂', he: '◊™◊©◊ú◊ï◊ù', en: 'Payment' },
  'monthly': { ru: '–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π', he: '◊ó◊ï◊ì◊©◊ô', en: 'Monthly' },
  'term': { ru: '–°—Ä–æ–∫', he: '◊™◊ß◊ï◊§◊î', en: 'Term' },
  'income': { ru: '–î–æ—Ö–æ–¥', he: '◊î◊õ◊†◊°◊î', en: 'Income' },
  'employment': { ru: '–†–∞–±–æ—Ç–∞', he: '◊¢◊ë◊ï◊ì◊î', en: 'Employment' },
  
  // Common UI terms
  'loading': { ru: '–ó–∞–≥—Ä—É–∑–∫–∞', he: '◊ò◊ï◊¢◊ü', en: 'Loading' },
  'verification': { ru: '–ü—Ä–æ–≤–µ—Ä–∫–∞', he: '◊ê◊ô◊û◊ï◊™', en: 'Verification' },
  'registration': { ru: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', he: '◊î◊®◊©◊û◊î', en: 'Registration' },
  'login': { ru: '–í—Ö–æ–¥', he: '◊õ◊†◊ô◊°◊î', en: 'Login' },
  'reset': { ru: '–°–±—Ä–æ—Å', he: '◊ê◊ô◊§◊ï◊°', en: 'Reset' },
  'program': { ru: '–ü—Ä–æ–≥—Ä–∞–º–º–∞', he: '◊™◊õ◊†◊ô◊™', en: 'Program' },
  'selection': { ru: '–í—ã–±–æ—Ä', he: '◊ë◊ó◊ô◊®◊î', en: 'Selection' },
  'option': { ru: '–û–ø—Ü–∏—è', he: '◊ê◊§◊©◊®◊ï◊™', en: 'Option' },
  'step': { ru: '–®–∞–≥', he: '◊©◊ú◊ë', en: 'Step' },
  'form': { ru: '–§–æ—Ä–º–∞', he: '◊ò◊ï◊§◊°', en: 'Form' },
  'data': { ru: '–î–∞–Ω–Ω—ã–µ', he: '◊†◊™◊ï◊†◊ô◊ù', en: 'Data' },
  'personal': { ru: '–õ–∏—á–Ω—ã–µ', he: '◊ê◊ô◊©◊ô', en: 'Personal' },
  'partner': { ru: '–ü–∞—Ä—Ç–Ω–µ—Ä', he: '◊©◊ï◊™◊£', en: 'Partner' },
  'borrower': { ru: '–ó–∞–µ–º—â–∏–∫', he: '◊ú◊ï◊ï◊î', en: 'Borrower' },
  'coborrower': { ru: '–°–æ–∑–∞–µ–º—â–∏–∫', he: '◊ú◊ï◊ï◊î ◊©◊ï◊™◊£', en: 'Co-borrower' },
  'additional': { ru: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π', he: '◊†◊ï◊°◊£', en: 'Additional' },
  'obligation': { ru: '–û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ', he: '◊î◊™◊ó◊ô◊ô◊ë◊ï◊™', en: 'Obligation' },
  'summary': { ru: '–°–≤–æ–¥–∫–∞', he: '◊°◊ô◊õ◊ï◊ù', en: 'Summary' }
};

function generateSmartTranslation(contentKey, lang) {
  // Remove screen location prefix and clean up
  const cleanKey = contentKey.replace(/^[^.]+\./, '').toLowerCase();
  
  // Try to find matching patterns
  for (const [pattern, translations] of Object.entries(TRANSLATION_PATTERNS)) {
    if (cleanKey.includes(pattern)) {
      return translations[lang];
    }
  }
  
  // Special handling for numbered items
  if (cleanKey.match(/^item_\d+$/)) {
    const screenPart = contentKey.split('.')[0];
    const itemNum = cleanKey.replace('item_', '');
    
    // Create context-aware translations based on screen type
    if (screenPart.includes('login')) {
      return {
        ru: `–≠–ª–µ–º–µ–Ω—Ç –≤—Ö–æ–¥–∞ ${itemNum}`,
        he: `◊§◊®◊ô◊ò ◊õ◊†◊ô◊°◊î ${itemNum}`,
        en: `Login Item ${itemNum}`
      }[lang];
    } else if (screenPart.includes('personal_data') || screenPart.includes('personal')) {
      return {
        ru: `–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ${itemNum}`,
        he: `◊†◊™◊ï◊†◊ô◊ù ◊ê◊ô◊©◊ô◊ô◊ù ${itemNum}`,
        en: `Personal Data ${itemNum}`
      }[lang];
    } else if (screenPart.includes('income')) {
      return {
        ru: `–î–æ—Ö–æ–¥ ${itemNum}`,
        he: `◊î◊õ◊†◊°◊î ${itemNum}`,
        en: `Income ${itemNum}`
      }[lang];
    } else if (screenPart.includes('program_selection')) {
      return {
        ru: `–û–ø—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã ${itemNum}`,
        he: `◊ê◊§◊©◊®◊ï◊™ ◊™◊õ◊†◊ô◊™ ${itemNum}`,
        en: `Program Option ${itemNum}`
      }[lang];
    } else if (screenPart.includes('step')) {
      const stepMatch = screenPart.match(/step(\d+)/);
      const stepNum = stepMatch ? stepMatch[1] : '';
      return {
        ru: `–®–∞–≥ ${stepNum} —ç–ª–µ–º–µ–Ω—Ç ${itemNum}`,
        he: `◊©◊ú◊ë ${stepNum} ◊§◊®◊ô◊ò ${itemNum}`,
        en: `Step ${stepNum} Item ${itemNum}`
      }[lang];
    }
  }
  
  // Generic fallback - make it more readable
  const readable = contentKey
    .replace(/^[^.]+\./, '')  // Remove screen prefix
    .replace(/_/g, ' ')       // Replace underscores
    .replace(/\b\w/g, l => l.toUpperCase()); // Capitalize words
    
  return `[${lang.toUpperCase()}] ${readable}`;
}

async function findItemsNeedingTranslations(limit = 50) {
  console.log(`üîç Finding items that need translations (limit: ${limit})...\n`);
  
  const query = `
    SELECT 
      ci.id,
      ci.content_key,
      ci.component_type,
      ci.screen_location,
      COUNT(ct.id) as existing_translations
    FROM content_items ci
    LEFT JOIN content_translations ct ON ci.id = ct.content_item_id 
      AND ct.status IN ('approved', 'draft')
    WHERE ci.is_active = TRUE 
      AND ci.screen_location IS NOT NULL 
      AND ci.screen_location != ''
    GROUP BY ci.id, ci.content_key, ci.component_type, ci.screen_location
    HAVING COUNT(ct.id) < 3
    ORDER BY ci.screen_location, ci.content_key
    LIMIT $1
  `;
  
  const result = await pool.query(query, [limit]);
  
  console.log(`üìä Found ${result.rows.length} items needing translations\n`);
  
  // Group by screen for better reporting
  const byScreen = {};
  for (const row of result.rows) {
    if (!byScreen[row.screen_location]) {
      byScreen[row.screen_location] = [];
    }
    byScreen[row.screen_location].push(row);
  }
  
  console.log('üìç Items by screen:');
  for (const [screen, items] of Object.entries(byScreen)) {
    console.log(`  ${screen}: ${items.length} items`);
  }
  console.log('');
  
  return result.rows;
}

async function fixItemTranslations(item) {
  const { id: itemId, content_key, component_type, screen_location } = item;
  
  // Get existing translations
  const existingQuery = `
    SELECT language_code 
    FROM content_translations 
    WHERE content_item_id = $1 AND status IN ('approved', 'draft')
  `;
  const existingResult = await pool.query(existingQuery, [itemId]);
  const existingLangs = existingResult.rows.map(row => row.language_code);
  
  let fixesApplied = 0;
  
  // Create missing translations
  for (const lang of LANGUAGES) {
    if (!existingLangs.includes(lang)) {
      const translation = generateSmartTranslation(content_key, lang);
      
      try {
        await pool.query(
          `INSERT INTO content_translations (content_item_id, language_code, content_value, status, created_at, updated_at)
           VALUES ($1, $2, $3, 'approved', NOW(), NOW())`,
          [itemId, lang, translation]
        );
        console.log(`  ‚úÖ Created ${content_key} (${lang}): ${translation}`);
        fixesApplied++;
      } catch (error) {
        console.log(`  ‚ùå Failed ${content_key} (${lang}):`, error.message);
      }
    }
  }
  
  return fixesApplied;
}

async function batchFixTranslations(batchSize = 50) {
  console.log('üöÄ BATCH TRANSLATION FIXER\n');
  
  let totalFixed = 0;
  let totalItems = 0;
  let processedScreens = new Set();
  
  while (true) {
    // Find items that need fixing
    const itemsToFix = await findItemsNeedingTranslations(batchSize);
    
    if (itemsToFix.length === 0) {
      console.log('üéâ No more items need translation fixes!');
      break;
    }
    
    console.log(`üîß Processing batch of ${itemsToFix.length} items...\n`);
    
    // Process each item
    for (const item of itemsToFix) {
      const fixes = await fixItemTranslations(item);
      totalFixed += fixes;
      totalItems++;
      processedScreens.add(item.screen_location);
    }
    
    console.log(`\n‚úÖ Batch completed. Fixed ${totalFixed} translations for ${totalItems} items so far.\n`);
    
    // If we processed fewer than the batch size, we're done
    if (itemsToFix.length < batchSize) {
      break;
    }
    
    // Small delay to prevent overwhelming the database
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  console.log('üéä BATCH PROCESSING COMPLETE!\n');
  console.log('üìä FINAL SUMMARY:');
  console.log(`Items processed: ${totalItems}`);
  console.log(`Translations created: ${totalFixed}`);
  console.log(`Screens affected: ${processedScreens.size}`);
  console.log('');
  
  if (processedScreens.size > 0) {
    console.log('üìç Affected screens:');
    Array.from(processedScreens).sort().forEach(screen => {
      console.log(`  - ${screen}`);
    });
  }
  
  return { totalItems, totalFixed, screenCount: processedScreens.size };
}

async function main() {
  try {
    const result = await batchFixTranslations(100); // Process up to 100 items per batch
    
    if (result.totalFixed > 0) {
      console.log('\nüîç Running quick verification...');
      
      // Quick verification - count items still needing translations
      const verifyQuery = `
        SELECT COUNT(*) as remaining_items
        FROM content_items ci
        WHERE ci.is_active = TRUE 
          AND ci.screen_location IS NOT NULL 
          AND ci.screen_location != ''
          AND (
            SELECT COUNT(*) 
            FROM content_translations ct 
            WHERE ct.content_item_id = ci.id AND ct.status IN ('approved', 'draft')
          ) < 3
      `;
      
      const verifyResult = await pool.query(verifyQuery);
      const remaining = parseInt(verifyResult.rows[0].remaining_items);
      
      if (remaining === 0) {
        console.log('üéâ SUCCESS! All items now have complete translations!');
      } else {
        console.log(`‚ÑπÔ∏è  ${remaining} items still need translations (may need manual attention)`);
      }
    }
    
  } catch (error) {
    console.error('üí• Script failed:', error);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

if (require.main === module) {
  main();
}

module.exports = { batchFixTranslations, generateSmartTranslation };