#!/usr/bin/env node

const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  connectionString: process.env.CONTENT_DATABASE_URL || process.env.DATABASE_URL || 'postgresql://postgres:SuFkUevgonaZFXJiJeczFiXYTlICHVJL@shortline.proxy.rlwy.net:33452/railway',
  ssl: { rejectUnauthorized: false }
});

const LANGUAGES = ['ru', 'he', 'en'];

// Specific translations for credit refi program selection based on typical content
const SPECIFIC_TRANSLATIONS = {
  'credit_refi_program_selection.item_1': {
    ru: '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è',
    he: '◊ë◊ó◊® ◊™◊õ◊†◊ô◊™ ◊ú◊û◊ó◊ñ◊ï◊® ◊ê◊©◊®◊ê◊ô',
    en: 'Select Credit Refinancing Program'
  },
  'credit_refi_program_selection.item_2': {
    ru: '–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è',
    he: '◊™◊õ◊†◊ô◊ï◊™ ◊û◊ó◊ñ◊ï◊® ◊ñ◊û◊ô◊†◊ï◊™',
    en: 'Available Refinancing Programs'
  },
  'credit_refi_program_selection.item_3': {
    ru: '–£—Å–ª–æ–≤–∏—è –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è',
    he: '◊™◊†◊ê◊ô◊ù ◊ï◊ì◊®◊ô◊©◊ï◊™',
    en: 'Terms and Requirements'
  },
  'credit_refi_program_selection.item_4': {
    ru: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ',
    he: '◊û◊ó◊ñ◊ï◊® ◊®◊í◊ô◊ú',
    en: 'Standard Refinancing'
  },
  'credit_refi_program_selection.item_5': {
    ru: '–†–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏',
    he: '◊û◊ó◊ñ◊ï◊® ◊¢◊ù ◊™◊†◊ê◊ô◊ù ◊û◊©◊ï◊§◊®◊ô◊ù',
    en: 'Enhanced Terms Refinancing'
  },
  'credit_refi_program_selection.item_6': {
    ru: '–≠–∫—Å–ø—Ä–µ—Å—Å-—Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ',
    he: '◊û◊ó◊ñ◊ï◊® ◊û◊î◊ô◊®',
    en: 'Express Refinancing'
  },
  'credit_refi_program_selection.item_7': {
    ru: '–†–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è VIP –∫–ª–∏–µ–Ω—Ç–æ–≤',
    he: '◊û◊ó◊ñ◊ï◊® ◊¢◊ë◊ï◊® ◊ú◊ß◊ï◊ó◊ï◊™ VIP',
    en: 'VIP Client Refinancing'
  },
  'credit_refi_program_selection.item_8': {
    ru: '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞',
    he: '◊™◊õ◊†◊ô◊™ ◊ê◊ô◊©◊ô◊™',
    en: 'Individual Program'
  },
  'credit_refi_program_selection.item_9': {
    ru: '–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö',
    he: '◊û◊ô◊ì◊¢ ◊û◊§◊ï◊®◊ò ◊¢◊ú ◊î◊™◊õ◊†◊ô◊ï◊™',
    en: 'Detailed Program Information'
  },
  'credit_refi_program_selection.item_10': {
    ru: '–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞',
    he: '◊®◊ô◊ë◊ô◊™',
    en: 'Interest Rate'
  },
  'credit_refi_program_selection.item_11': {
    ru: '–°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞',
    he: '◊™◊ß◊ï◊§◊™ ◊î◊ê◊©◊®◊ê◊ô',
    en: 'Loan Term'
  },
  'credit_refi_program_selection.item_12': {
    ru: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞',
    he: '◊°◊õ◊ï◊ù ◊û◊ô◊†◊ô◊û◊ú◊ô',
    en: 'Minimum Amount'
  },
  'credit_refi_program_selection.item_13': {
    ru: '–ö–æ–º–∏—Å—Å–∏—è –∑–∞ —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ',
    he: '◊¢◊û◊ú◊™ ◊û◊ó◊ñ◊ï◊®',
    en: 'Refinancing Fee'
  },
  'credit_refi_program_selection.item_14': {
    ru: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏',
    he: '◊©◊ô◊®◊ï◊™◊ô◊ù ◊†◊ï◊°◊§◊ô◊ù',
    en: 'Additional Services'
  },
  'credit_refi_program_selection.item_15': {
    ru: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π',
    he: '◊î◊û◊©◊ö ◊¢◊ù ◊î◊™◊õ◊†◊ô◊™ ◊©◊†◊ë◊ó◊®◊î',
    en: 'Continue with Selected Program'
  }
};

function generateFallbackTranslation(contentKey, lang) {
  // Clean up the key to make it readable
  const cleanKey = contentKey
    .replace('credit_refi_program_selection.', '')
    .replace('item_', 'Item ')
    .replace(/_/g, ' ')
    .replace(/\b\w/g, l => l.toUpperCase());
    
  return `[${lang.toUpperCase()}] ${cleanKey}`;
}

async function fixCreditRefiProgramSelection() {
  console.log('üîß Fixing credit_refi_program_selection translations...\n');
  
  // Get all items that need translations
  const itemsQuery = `
    SELECT id, content_key, component_type
    FROM content_items 
    WHERE screen_location = 'credit_refi_program_selection' 
      AND is_active = TRUE
    ORDER BY content_key
  `;
  
  const itemsResult = await pool.query(itemsQuery);
  console.log(`Found ${itemsResult.rows.length} items to fix\n`);
  
  let totalFixes = 0;
  
  for (const item of itemsResult.rows) {
    const { id: itemId, content_key, component_type } = item;
    console.log(`üîß Processing: ${content_key} (${component_type})`);
    
    // Check if translations already exist
    const existingQuery = `
      SELECT language_code 
      FROM content_translations 
      WHERE content_item_id = $1 AND status IN ('approved', 'draft')
    `;
    const existingResult = await pool.query(existingQuery, [itemId]);
    const existingLangs = existingResult.rows.map(row => row.language_code);
    
    // Create missing translations
    for (const lang of LANGUAGES) {
      if (!existingLangs.includes(lang)) {
        // Use specific translation if available, otherwise generate fallback
        let translation;
        if (SPECIFIC_TRANSLATIONS[content_key] && SPECIFIC_TRANSLATIONS[content_key][lang]) {
          translation = SPECIFIC_TRANSLATIONS[content_key][lang];
        } else {
          translation = generateFallbackTranslation(content_key, lang);
        }
        
        try {
          await pool.query(
            `INSERT INTO content_translations (content_item_id, language_code, content_value, status, created_at, updated_at)
             VALUES ($1, $2, $3, 'approved', NOW(), NOW())`,
            [itemId, lang, translation]
          );
          console.log(`  ‚úÖ Created ${lang}: ${translation}`);
          totalFixes++;
        } catch (error) {
          console.log(`  ‚ùå Failed ${lang}:`, error.message);
        }
      } else {
        console.log(`  ‚è≠Ô∏è  Skipped ${lang}: already exists`);
      }
    }
    console.log('');
  }
  
  console.log(`üéØ Applied ${totalFixes} translations total\n`);
  
  // Verify the fix
  console.log('üîç Verifying fix...');
  const verifyQuery = `
    SELECT ci.content_key,
           COUNT(ct.id) as translation_count,
           ARRAY_AGG(ct.language_code ORDER BY ct.language_code) as languages
    FROM content_items ci
    LEFT JOIN content_translations ct ON ci.id = ct.content_item_id 
      AND ct.status IN ('approved', 'draft')
    WHERE ci.screen_location = 'credit_refi_program_selection'
      AND ci.is_active = TRUE
    GROUP BY ci.id, ci.content_key
    ORDER BY ci.content_key
  `;
  
  const verifyResult = await pool.query(verifyQuery);
  
  let allComplete = true;
  for (const row of verifyResult.rows) {
    const count = parseInt(row.translation_count);
    if (count === 3) {
      console.log(`‚úÖ ${row.content_key}: Complete (${row.languages?.join(', ')})`);
    } else {
      console.log(`‚ùå ${row.content_key}: Incomplete (${count}/3) - ${row.languages?.join(', ') || 'none'}`);
      allComplete = false;
    }
  }
  
  if (allComplete) {
    console.log('\nüéâ SUCCESS! All items in credit_refi_program_selection now have complete translations!');
  } else {
    console.log('\n‚ö†Ô∏è  Some items still need attention');
  }
  
  return { totalFixes, itemsFixed: itemsResult.rows.length, allComplete };
}

async function main() {
  try {
    const result = await fixCreditRefiProgramSelection();
    
    console.log('\nüìä SUMMARY:');
    console.log(`Items processed: ${result.itemsFixed}`);
    console.log(`Translations created: ${result.totalFixes}`);
    console.log(`Status: ${result.allComplete ? 'COMPLETE' : 'NEEDS ATTENTION'}`);
    
  } catch (error) {
    console.error('üí• Script failed:', error);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

if (require.main === module) {
  main();
}

module.exports = { fixCreditRefiProgramSelection };