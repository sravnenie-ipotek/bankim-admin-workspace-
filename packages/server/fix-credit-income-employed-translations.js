require('dotenv').config();
const { Pool } = require('pg');

const pool = new Pool({
  connectionString: process.env.CONTENT_DATABASE_URL
});

async function fixCreditIncomeEmployedTranslations() {
  try {
    console.log('üöÄ Adding translations for credit_income_employed...');
    
    // First, let's check what items exist for this screen
    const itemsQuery = `
      SELECT 
        ci.id,
        ci.content_key,
        ci.component_type,
        ci.page_number,
        MAX(CASE WHEN ct.language_code = 'ru' THEN ct.content_value END) as text_ru,
        MAX(CASE WHEN ct.language_code = 'he' THEN ct.content_value END) as text_he,
        MAX(CASE WHEN ct.language_code = 'en' THEN ct.content_value END) as text_en
      FROM content_items ci
      LEFT JOIN content_translations ct ON ci.id = ct.content_item_id
      WHERE ci.screen_location = 'credit_income_employed'
        AND ci.is_active = TRUE
      GROUP BY ci.id, ci.content_key, ci.component_type, ci.page_number
      ORDER BY ci.page_number, ci.id
    `;
    
    const items = await pool.query(itemsQuery);
    console.log(`üìã Found ${items.rows.length} items for credit_income_employed`);
    
    // Check how many already have translations
    const withTranslations = items.rows.filter(item => 
      item.text_ru || item.text_he || item.text_en
    );
    console.log(`üìä ${withTranslations.length}/${items.rows.length} items have translations`);
    
    if (withTranslations.length < items.rows.length) {
      console.log('\nüîß Adding meaningful translations for credit income employed form...');
      
      // Define meaningful translations for income employed form
      const translations = [
        { key: 'credit_income_employed.item_1', ru: '–î–∞–Ω–Ω—ã–µ –æ –¥–æ—Ö–æ–¥–∞—Ö', he: '◊§◊®◊ò◊ô ◊î◊õ◊†◊°◊î', en: 'Income Information' },
        { key: 'credit_income_employed.item_2', ru: '–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã', he: '◊û◊ß◊ï◊ù ◊¢◊ë◊ï◊ì◊î ◊¢◊ô◊ß◊®◊ô', en: 'Primary Workplace' },
        { key: 'credit_income_employed.item_3', ru: '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è', he: '◊©◊ù ◊î◊û◊¢◊°◊ô◊ß', en: 'Employer Name' },
        { key: 'credit_income_employed.item_4', ru: '–î–æ–ª–∂–Ω–æ—Å—Ç—å', he: '◊™◊§◊ß◊ô◊ì', en: 'Position' },
        { key: 'credit_income_employed.item_5', ru: '–°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã', he: '◊ï◊™◊ß ◊ë◊¢◊ë◊ï◊ì◊î', en: 'Work Experience' },
        { key: 'credit_income_employed.item_6', ru: '–ú–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ (–±—Ä—É—Ç—Ç–æ)', he: '◊î◊õ◊†◊°◊î ◊ó◊ï◊ì◊©◊ô◊™ (◊ë◊®◊ï◊ò◊ï)', en: 'Monthly Income (Gross)' },
        { key: 'credit_income_employed.item_7', ru: '–ú–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ (–Ω–µ—Ç—Ç–æ)', he: '◊î◊õ◊†◊°◊î ◊ó◊ï◊ì◊©◊ô◊™ (◊†◊ò◊ï)', en: 'Monthly Income (Net)' },
        { key: 'credit_income_employed.item_8', ru: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ—Ö–æ–¥—ã', he: '◊î◊õ◊†◊°◊ï◊™ ◊†◊ï◊°◊§◊ï◊™', en: 'Additional Income' },
        { key: 'credit_income_employed.item_9', ru: '–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ—Ö–æ–¥–æ–≤', he: '◊û◊ß◊ï◊® ◊î◊õ◊†◊°◊ï◊™ ◊†◊ï◊°◊§◊ï◊™', en: 'Source of Additional Income' },
        { key: 'credit_income_employed.item_10', ru: '–¢–∏–ø —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', he: '◊°◊ï◊í ◊î◊¢◊°◊ß◊î', en: 'Employment Type' },
        { key: 'credit_income_employed.item_11', ru: '–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å', he: '◊û◊©◊®◊î ◊û◊ú◊ê◊î', en: 'Full-time Employment' },
        { key: 'credit_income_employed.item_12', ru: '–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å', he: '◊û◊©◊®◊î ◊ó◊ú◊ß◊ô◊™', en: 'Part-time Employment' },
        { key: 'credit_income_employed.item_13', ru: '–ö–æ–Ω—Ç—Ä–∞–∫—Ç', he: '◊ó◊ï◊ñ◊î', en: 'Contract' },
        { key: 'credit_income_employed.item_14', ru: '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å', he: '◊¢◊ï◊°◊ß ◊û◊ï◊®◊©◊î', en: 'Self-employed' },
        { key: 'credit_income_employed.item_15', ru: '–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è', he: '◊ò◊ú◊§◊ï◊ü ◊î◊û◊¢◊°◊ô◊ß', en: 'Employer Phone' },
        { key: 'credit_income_employed.item_16', ru: '–ê–¥—Ä–µ—Å —Ä–∞–±–æ—Ç—ã', he: '◊õ◊™◊ï◊ë◊™ ◊î◊¢◊ë◊ï◊ì◊î', en: 'Work Address' },
        { key: 'credit_income_employed.item_17', ru: '–ì–æ—Ä–æ–¥', he: '◊¢◊ô◊®', en: 'City' },
        { key: 'credit_income_employed.item_18', ru: '–ò–Ω–¥–µ–∫—Å', he: '◊û◊ô◊ß◊ï◊ì', en: 'Postal Code' },
        { key: 'credit_income_employed.item_19', ru: '–°–ø—Ä–∞–≤–∫–∞ –æ –¥–æ—Ö–æ–¥–∞—Ö', he: '◊ê◊ô◊©◊ï◊® ◊î◊õ◊†◊°◊î', en: 'Income Certificate' },
        { key: 'credit_income_employed.item_20', ru: '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç', he: '◊¶◊®◊£ ◊û◊°◊û◊ö', en: 'Attach Document' },
        { key: 'credit_income_employed.item_21', ru: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è', he: '◊©◊û◊ï◊® ◊©◊ô◊†◊ï◊ô◊ô◊ù', en: 'Save Changes' },
        { key: 'credit_income_employed.item_22', ru: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', he: '◊î◊û◊©◊ö', en: 'Continue' }
      ];
      
      let addedCount = 0;
      for (const item of items.rows) {
        const itemNumber = parseInt(item.content_key.match(/item_(\d+)/)?.[1] || '1');
        const translation = translations[itemNumber - 1];
        
        if (translation && (!item.text_ru || !item.text_he || !item.text_en)) {
          console.log(`  Adding translations for ${item.content_key}...`);
          
          // Add translations for this item
          const languages = [
            { code: 'ru', text: translation.ru },
            { code: 'he', text: translation.he },
            { code: 'en', text: translation.en }
          ];
          
          for (const lang of languages) {
            await pool.query(`
              INSERT INTO content_translations (
                content_item_id,
                language_code,
                content_value,
                status,
                created_at,
                updated_at
              ) VALUES ($1, $2, $3, 'approved', NOW(), NOW())
              ON CONFLICT (content_item_id, language_code) DO UPDATE SET
                content_value = EXCLUDED.content_value,
                status = 'approved',
                updated_at = NOW()
            `, [item.id, lang.code, lang.text]);
          }
          addedCount++;
        }
      }
      
      console.log(`‚úÖ Added translations for ${addedCount} items`);
      
      // Verify the translations were added
      console.log('\nüîç Verifying translations...');
      const verifyQuery = await pool.query(itemsQuery);
      const nowWithTranslations = verifyQuery.rows.filter(item => 
        item.text_ru && item.text_he && item.text_en
      );
      console.log(`üìä Now ${nowWithTranslations.length}/${verifyQuery.rows.length} items have complete translations`);
      
      if (nowWithTranslations.length > 0) {
        console.log('\n‚ú® Sample translations added:');
        nowWithTranslations.slice(0, 3).forEach((item, index) => {
          console.log(`  ${index + 1}. ${item.content_key}:`);
          console.log(`     RU: "${item.text_ru}"`);
          console.log(`     HE: "${item.text_he}"`);
          console.log(`     EN: "${item.text_en}"`);
        });
      }
    }
    
    console.log('\n‚úÖ Credit income employed translations complete!');
    await pool.end();
  } catch (error) {
    console.error('‚ùå Error fixing credit income employed translations:', error);
    await pool.end();
    process.exit(1);
  }
}

fixCreditIncomeEmployedTranslations();